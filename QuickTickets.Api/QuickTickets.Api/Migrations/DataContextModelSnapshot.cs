// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickTickets.Api.Data;

#nullable disable

namespace QuickTickets.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuickTickets.Api.Entities.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GoogleSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33daa9ec-4922-42d6-ad7a-e4ac31314f0b"),
                            DateCreated = new DateTime(2023, 5, 16, 16, 42, 29, 459, DateTimeKind.Local).AddTicks(3464),
                            DateOfBirth = new DateTime(2000, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "agardian00@cos.nie",
                            IsDeleted = false,
                            Login = "agardian",
                            Name = "Artur",
                            Password = "jGl25bVBBBW96Qi9Te4V37Fnqchz/Eu4qB9vKrRIqRg=",
                            RoleID = 1,
                            Surname = "Gardian"
                        },
                        new
                        {
                            Id = new Guid("ccc876c5-5dbc-41f8-b0e3-574156e62a8d"),
                            DateCreated = new DateTime(2023, 5, 16, 16, 42, 29, 459, DateTimeKind.Local).AddTicks(3531),
                            DateOfBirth = new DateTime(2002, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jkowalski01@cos.nie",
                            IsDeleted = false,
                            Login = "jkowalski",
                            Name = "Jan",
                            Password = "jGl25bVBBBW96Qi9Te4V37Fnqchz/Eu4qB9vKrRIqRg=",
                            RoleID = 3,
                            Surname = "Kowalski"
                        });
                });

            modelBuilder.Entity("QuickTickets.Api.Entities.EventsEntity", b =>
                {
                    b.Property<long>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EventID"));

                    b.Property<bool>("AdultsOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("LocationID")
                        .HasColumnType("bigint");

                    b.Property<Guid>("OwnerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<float>("TicketPrice")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TypeID")
                        .HasColumnType("bigint");

                    b.HasKey("EventID");

                    b.HasIndex("LocationID");

                    b.HasIndex("TypeID");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventID = 1L,
                            AdultsOnly = true,
                            Date = new DateTime(2023, 5, 27, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 5, 16, 16, 42, 29, 459, DateTimeKind.Local).AddTicks(3622),
                            Description = "\"Ludzie trzymajcie kapelusze\" to mój drugi solowy program, grany od grudnia 2016 do sierpnia 2017 roku.  Udostępniony materiał został zarejestrowany 10 lipca 2017 roku w gdańskim klubie \"Parlament\". Obok mnie na scenie pojawił się również Adam Van Bendler.",
                            ImgURL = "https://images.unsplash.com/photo-1610964199131-5e29387e6267?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1932&q=80",
                            IsActive = true,
                            LocationID = 2L,
                            OwnerID = new Guid("bb47eede-6953-43df-a26f-cdac99be8e87"),
                            Seats = 123,
                            TicketPrice = 10f,
                            Title = "Ludzie trzymajcie spodnie",
                            TypeID = 7L
                        },
                        new
                        {
                            EventID = 2L,
                            AdultsOnly = false,
                            Date = new DateTime(2023, 5, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 5, 16, 16, 42, 29, 459, DateTimeKind.Local).AddTicks(3644),
                            Description = "Spływ kajakiem po rzece Morawka",
                            ImgURL = "https://images.unsplash.com/photo-1472745942893-4b9f730c7668?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1169&q=80",
                            IsActive = true,
                            LocationID = 6L,
                            OwnerID = new Guid("bb47eede-6953-43df-a26f-cdac99be8e87"),
                            Seats = 60,
                            TicketPrice = 25f,
                            Title = "Spływ kajakowy",
                            TypeID = 3L
                        },
                        new
                        {
                            EventID = 3L,
                            AdultsOnly = false,
                            Date = new DateTime(2023, 5, 28, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 5, 16, 16, 42, 29, 459, DateTimeKind.Local).AddTicks(3652),
                            Description = "W swoim wykonaniu Pani Żak zaprezentuje swoje umiejętności artystyczne.",
                            ImgURL = "https://images.unsplash.com/photo-1521116103845-2170f3377fec?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80",
                            IsActive = true,
                            LocationID = 5L,
                            OwnerID = new Guid("bb47eede-6953-43df-a26f-cdac99be8e87"),
                            Seats = 100,
                            TicketPrice = 15f,
                            Title = "Recital Pani Żak",
                            TypeID = 1L
                        },
                        new
                        {
                            EventID = 4L,
                            AdultsOnly = true,
                            Date = new DateTime(2023, 5, 31, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 5, 16, 16, 42, 29, 459, DateTimeKind.Local).AddTicks(3657),
                            Description = "W naszej ofercie po prostu tak jakby przedstawimy oferty grona firm mówiących o swoich zapotrzebowaniach i planach dla widza.",
                            ImgURL = "https://images.unsplash.com/photo-1618092388874-e262a562887f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1025&q=80",
                            IsActive = true,
                            LocationID = 1L,
                            OwnerID = new Guid("bb47eede-6953-43df-a26f-cdac99be8e87"),
                            Seats = 600,
                            TicketPrice = 50f,
                            Title = "Targi pracy",
                            TypeID = 6L
                        });
                });

            modelBuilder.Entity("QuickTickets.Api.Entities.LocationsEntity", b =>
                {
                    b.Property<long>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LocationID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationID = 1L,
                            Name = "Kielce"
                        },
                        new
                        {
                            LocationID = 2L,
                            Name = "Kraków"
                        },
                        new
                        {
                            LocationID = 3L,
                            Name = "Warszawa"
                        },
                        new
                        {
                            LocationID = 4L,
                            Name = "Katowice"
                        },
                        new
                        {
                            LocationID = 5L,
                            Name = "Łódź"
                        },
                        new
                        {
                            LocationID = 6L,
                            Name = "Gdańsk"
                        });
                });

            modelBuilder.Entity("QuickTickets.Api.Entities.RoleEntity", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            Name = "admin"
                        },
                        new
                        {
                            RoleID = 2,
                            Name = "user"
                        },
                        new
                        {
                            RoleID = 3,
                            Name = "organiser"
                        });
                });

            modelBuilder.Entity("QuickTickets.Api.Entities.TypesOfEventsEntity", b =>
                {
                    b.Property<long>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TypeID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeID");

                    b.ToTable("TypesOfEvents");

                    b.HasData(
                        new
                        {
                            TypeID = 1L,
                            Description = "Koncert"
                        },
                        new
                        {
                            TypeID = 2L,
                            Description = "Teatr"
                        },
                        new
                        {
                            TypeID = 3L,
                            Description = "Sport"
                        },
                        new
                        {
                            TypeID = 4L,
                            Description = "Kino"
                        },
                        new
                        {
                            TypeID = 5L,
                            Description = "Festiwal"
                        },
                        new
                        {
                            TypeID = 6L,
                            Description = "Targi"
                        },
                        new
                        {
                            TypeID = 7L,
                            Description = "Stand-up"
                        });
                });

            modelBuilder.Entity("QuickTickets.Api.Entities.EventsEntity", b =>
                {
                    b.HasOne("QuickTickets.Api.Entities.LocationsEntity", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickTickets.Api.Entities.TypesOfEventsEntity", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Type");
                });
#pragma warning restore 612, 618
        }
    }
}
